{"config": {"Build Date": "20 Jan 2022", "Commit": "ab159cd", "LLVM Version": "12.0.0", "Mull Version": "0.15.0", "URL": "https://github.com/mull-project/mull"}, "files": {"/__w/mutation-lab-class-2/mutation-lab-class-2/programs/hash/hash.c": {"language": "cpp", "mutants": [{"id": "cxx_rem_to_div", "location": {"end": {"column": 16, "line": 18}, "start": {"column": 15, "line": 18}}, "mutatorName": "Replaced % with /", "replacement": "/", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 33, "line": 26}, "start": {"column": 31, "line": 26}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 38, "line": 28}, "start": {"column": 36, "line": 28}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 18, "line": 32}, "start": {"column": 7, "line": 32}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 33, "line": 51}, "start": {"column": 31, "line": 51}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 70, "line": 51}, "start": {"column": 68, "line": 51}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 18, "line": 53}, "start": {"column": 7, "line": 53}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 33, "line": 69}, "start": {"column": 31, "line": 69}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_eq_to_ne", "location": {"end": {"column": 38, "line": 71}, "start": {"column": 36, "line": 71}}, "mutatorName": "Replaced == with !=", "replacement": "!=", "status": "Survived"}, {"id": "cxx_pre_inc_to_pre_dec", "location": {"end": {"column": 18, "line": 80}, "start": {"column": 7, "line": 80}}, "mutatorName": "Replaced ++x with --x", "replacement": "--", "status": "Survived"}, {"id": "cxx_lt_to_ge", "location": {"end": {"column": 17, "line": 92}, "start": {"column": 16, "line": 92}}, "mutatorName": "Replaced < with >=", "replacement": ">=", "status": "Survived"}, {"id": "cxx_lt_to_le", "location": {"end": {"column": 17, "line": 92}, "start": {"column": 16, "line": 92}}, "mutatorName": "Replaced < with <=", "replacement": "<=", "status": "Survived"}, {"id": "cxx_post_inc_to_post_dec", "location": {"end": {"column": 26, "line": 92}, "start": {"column": 24, "line": 92}}, "mutatorName": "Replaced x++ with x--", "replacement": "--", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 25, "line": 94}, "start": {"column": 23, "line": 94}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 14, "line": 121}, "start": {"column": 12, "line": 121}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Survived"}, {"id": "cxx_ne_to_eq", "location": {"end": {"column": 14, "line": 130}, "start": {"column": 12, "line": 130}}, "mutatorName": "Replaced != with ==", "replacement": "==", "status": "Killed"}], "source": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define SIZE 20\n\nstruct DataItem {\n   int data;   \n   int key;\n};\n\nstruct DataItem* hashArray[SIZE]; \nstruct DataItem* dummyItem;\nstruct DataItem* item;\n\nint hashCode(int key) {\n   return key % SIZE;\n}\n\nstruct DataItem *search(int key) {\n   //get the hash \n   int hashIndex = hashCode(key);  \n\t\n   //move in array until an empty \n   while(hashArray[hashIndex] != NULL) {\n\t\n      if(hashArray[hashIndex]->key == key)\n         return hashArray[hashIndex]; \n\t\t\t\n      //go to next cell\n      ++hashIndex;\n\t\t\n      //wrap around the table\n      hashIndex %= SIZE;\n   }        \n\t\n   return NULL;        \n}\n\nvoid insert(int key,int data) {\n\n   struct DataItem *item = (struct DataItem*) malloc(sizeof(struct DataItem));\n   item->data = data;  \n   item->key = key;\n\n   //get the hash \n   int hashIndex = hashCode(key);\n\n   //move in array until an empty or deleted cell\n   while(hashArray[hashIndex] != NULL && hashArray[hashIndex]->key != -1) {\n      //go to next cell\n      ++hashIndex;\n\t\t\n      //wrap around the table\n      hashIndex %= SIZE;\n   }\n\t\n   hashArray[hashIndex] = item;\n}\n\nstruct DataItem* delete(struct DataItem* item) {\n   int key = item->key;\n\n   //get the hash \n   int hashIndex = hashCode(key);\n\n   //move in array until an empty\n   while(hashArray[hashIndex] != NULL) {\n\t\n      if(hashArray[hashIndex]->key == key) {\n         struct DataItem* temp = hashArray[hashIndex]; \n\t\t\t\n         //assign a dummy item at deleted position\n         hashArray[hashIndex] = dummyItem; \n         return temp;\n      }\n\t\t\n      //go to next cell\n      ++hashIndex;\n\t\t\n      //wrap around the table\n      hashIndex %= SIZE;\n   }      \n\t\n   return NULL;        \n}\n\nvoid display() {\n   int i = 0;\n\t\n   for(i = 0; i<SIZE; i++) {\n\t\n      if(hashArray[i] != NULL)\n         printf(\" (%d,%d)\",hashArray[i]->key,hashArray[i]->data);\n      else\n         printf(\" ~~ \");\n   }\n\t\n   printf(\"\\n\");\n}\n\nint main() {\n   dummyItem = (struct DataItem*) malloc(sizeof(struct DataItem));\n   dummyItem->data = -1;  \n   dummyItem->key = -1; \n\n   insert(1, 20);\n   insert(2, 70);\n   insert(42, 80);\n   insert(4, 25);\n   insert(12, 44);\n   insert(14, 32);\n   insert(17, 11);\n   insert(13, 78);\n   insert(37, 97);\n\n   display();\n   item = search(37);\n\n   if(item != NULL) {\n      printf(\"Element found: %d\\n\", item->data);\n   } else {\n      printf(\"Element not found\\n\");\n   }\n\n   delete(item);\n   item = search(37);\n\n   if(item != NULL) {\n      printf(\"Element found: %d\\n\", item->data);\n   } else {\n      printf(\"Element not found\\n\");\n   }\n}\n"}}, "framework": {"brandingInformation": {"homepageUrl": "https://github.com/mull-project/mull"}, "name": "Mull", "version": "0.15.0, LLVM 12.0.0"}, "mutationScore": 43, "schemaVersion": "1.7", "thresholds": {"high": 80, "low": 60}}